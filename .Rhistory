PRUEBA -> En este tutorial haremos clustering jerárquico, usando como base el mismo data set de Ford Ka, Antes, carguemos los paquetes que necesitamos.
Un reconocimiento a UC Business Analytics R Programming Guide de quien tomé ejemplos del código. Pueden [ver el código acá](https://uc-r.github.io/hc_clustering)
---
title: "Cluster Jerárquico"
author: "Ramiro Casó"
date: "8/26/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### Intro
PRUEBA -> En este tutorial haremos clustering jerárquico, usando como base el mismo data set de Ford Ka, Antes, carguemos los paquetes que necesitamos.
Un reconocimiento a UC Business Analytics R Programming Guide de quien tomé ejemplos del código. Pueden [ver el código acá](https://uc-r.github.io/hc_clustering)
```{r message=FALSE, warning=FALSE, paged.print=FALSE}
library(readxl)     # Lectura o carga de datos
library(tidyr)      # Pipe y manipulación de datos.
library(tidyverse)  # Manipulación de datos.
library(cluster)    # Clusters
library(factoextra) # Visualización
```
Seguidamente cargamos el set de datos. Lo haremos utilizando el data set de Ford Ka. Noten que cargué la hoja que ya tenía en mi working directory. En el comando de read_excel, específiqué la hoja que quería y, además, le quité las primeras 5 líneas, que no contienen información.
```{r message=FALSE, warning=FALSE}
psicograficos <- read_excel("DataSets/Ford_Ka_Students.xls",
sheet = "Psychographic Data", skip = 5)
head(psicograficos)
```
### Normalización
Lo que sigue es normalizar los datos. Hay que dejar en la matriz de datos solo las columnas que usaremos para agrupar, de modo que hay que sacar la primera columna.
```{r}
norm_psico <- scale(psicograficos[,-1])
```
### Clustering
Como vamos a hacer clustering jerárquico usaremos función *agnes* (su nombre viene de "agglomerative nesting").
Para poder hacerlo, tenemos que calcular la disimilaridades en la data, usando la función dist.
```{r}
# Matriz de disimilaridad
d <- dist(norm_psico, method = "euclidean")
# Clustering jerárquico usando el método "complete" de distancia.
hc1 <- hclust(d, method = "complete" )
# construcción del dendograma
plot(hc1, cex = 0.6, hang = -1)
```
Veamos que pasa si usamos otros métodos de cálculo de distancia entre clusters. En este caso, single.
```{r}
# Matriz de disimilaridad es la misma que el caso anterior y está guardada en el objeto d
# Clustering jerárquico usando el método "single" de distancia.
hc2 <- hclust(d, method = "single" )
# construcción del dendograma
plot(hc2, cex = 0.6, hang = -1)
```
Finalmente, probemos el método average.
```{r}
# Matriz de disimilaridad es la misma que el caso anterior y está guardada en el objeto d
# Clustering jerárquico usando el método "single" de distancia.
hc3 <- hclust(d, method = "average")
# construcción del dendograma
plot(hc3, cex = 0.6, hang = -1)
```
La altura de las fusiones en el dendograma, que se pueden apreciar en el eje verticual, indica la disimilaridad entre dos observaciones. Mientras más alta sea la fusión o unión, más diferentes son los observaciones. Nótese que la proximidad de las observaciones NO es un indicador similaridad. Solo la altura arroja esa información.
En razón de lo anterior, la altura a la que se corta un dendograma nos el número de cluster que queremos, similar a la selección de K en k-means. Para poder identificar subgrupos, podemos cortar el dendograma con la función *cutree*
```{r}
# Usaremos el método "complete" que fue el que arrojó el dendograma más claro.
hc5 <- hclust(d, method = "complete" )
# Cortaremos el dendograma en 4 clusters.
sub_grp <- cutree(hc5, k = 4)
# Acá podemos ver los subgrupos creados.
table(sub_grp)
```
Y si queremos agregar las columnas de membresías al data set original, podemos usar la función *mutate* de la siguiente forma.
```{r}
psicograficos %>%
mutate(cluster = sub_grp) %>%
head
```
Se puede inclusive hacer un dendograma resaltando los 4 clusters, de la siguiente forma:
```{r}
plot(hc5, cex = 0.6)
rect.hclust(hc5, k = 4, border = 2:5)
```
Finalmente, intentemos ver si podemos visualizar los clusters usando la función *fviz_cluster*
```{r}
fviz_cluster(list(data = psicograficos, cluster = sub_grp))
```
```{r
```
# Ordenar un data frame
También podemos ordenar por los valores numéricos o alfabéticos de cada columna.
La función order() la posición del caso en función de la variable.
Por ejemplo
```{r}
orden_partidos <-order(goleadores_df$partidos, decreasing = TRUE)
orden_partidos
```
Ahí se puede ver como el jugador en la segunda fila (Angel Labruna) es el que más partido tiene, por ese el número de su fila aparece de primero en el vector. El segundo jugador con más goles es Miguel Brindisi, por lo que su fila (8) está en la segunda posición.
knitr::opts_chunk$set(echo = TRUE)
# Imprimir el DF mtcars
mtcars
# Usa head() en mtcars
head(mtcars)
# Usa tail() en mtcars
tail(mtcars)
# Revisemos la estructura de mtcars con str()
str(mtcars)
# Definición de los vectores
nombre <- c("Arseio Erico", "Angel Labruna", "Herminio Masantonio", "Manuel Pelegrina", "Martín Palermo", "José Sanfilippo", "Carlos Bianchi", "Miguel Brindisi")
goles <- c(295,293,256,229,227,226,206,194)
partidos <- c(332,515,358,229,410,330,324,441)
argentino_si <- c(FALSE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE)
equipo <- c("Independiente","River","Huracán","Estudiantes","Boca Juniors","San Lorenzo","Velez Sarfield","Huracán")
# Una vez creados los vectores, hacemos el data frame y lo llamamos goleadores_df
goleadores_df <-data.frame(nombre,goles,partidos,argentino_si,equipo)
# Aprovechemos y apliquemos lo aprendido viendo la estructura del nuevo DF
str(goleadores_df)
# veamos cuántos partidos jugó Martín Palermo en su carrera (fila 5, columna 2)
goleadores_df[5,2]
# ahora veamos todos los valores para Carlos Bianchi (la fila 7 completa)
goleadores_df[7,]
goleadores_df[,4]
goleadores_df[,"argentino_si"]
argentino_vector <- goleadores_df$argentino_si # Noten que este código crea un vector aparte, llamado argentino_vector
argentino_vector
goleadores_df[argentino_vector,]
goleadores_df[goles > 250,]
orden_partidos <-order(goleadores_df$partidos, decreasing = TRUE)
orden_partidos
yolo=TRUE
knitr::opts_chunk$set(echo = TRUE)
x <- 5
x > 3 & x < 10
knitr::opts_chunk$set(echo = TRUE)
# Usemos nuevamente el objeto `x`.
x
# Usemos nuevamente el objeto `x`.
x
x>7 | x>2
?!
!?
# El operador NOT
2+2
tail?
?Tail
?"Helo"
?"Help"
?str
?not
?!
e
2 != 2
2 !=3
?last
?(last)
?last
?tail
---
title: "Logical Operatos"
author: "Ramiro Casó - Incae Business School"
date: "3/24/2021"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## ¿Qué son los operadores lógicos?
Son operadores del tipo AND `&`, OR `|` y NOT `!`, que permiten combinar los operadores relacionales que vimos en este [tutorial](https://ramirocaso.github.io/learning_R/relational_operators.html)
# El operador AND
El operador AND, que se usa con el signo del ampersand o `&` sirve para establecer relaciones entre dos datos o conjuntos de datos, siendo verdadero cuando los elementos del conjunto son verdaderos.
Por ejemplo
```{r}
x <- 5
x > 3 & x < 10
```
En este caso, el objeto `x` contiene el valor `5`. Como `5` es mayor que tres `Y TAMBIÉN` es menor que `10`, el resultado es `TRUE`.
# El operador OR
El operador `OR` que se escribe con la barra vertical `|` examina las dos afirmaciones y si al menos una de ellas es cierta, arroja como resultado `TRUE`.
Veamos un ejemplo
```{r}
# Usemos nuevamente el objeto `x`.
x
x>7 | x>2 # se lee x es mayor que 7 OR x es mayor que 2.
```
Como la expresión a la derecha del `|` es cierta, el resultado es `TRUE`. De nuevo, con que una de las opciones sea verdadero, el resultado del comando `OR` será verdadero.
# El operador NOT
Este operador evalúa lo opuesto al operador que se le asigna. Por ejemplo `!=` quiere decir `is not equal`.
# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1)
# Is last under 5 or above 10?
last < 5 | last > 10
# Is last between 15 (exclusive) and 20 (inclusive)?
last >= 15 & last <= 20
?last
??last
# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin)
# Is last under 5 or above 10?
last < 5 | last > 10
# Is last between 15 (exclusive) and 20 (inclusive)?
last >= 15 & last <= 20
?tail
# Veamos el ejemplo de visitas a un perfil de Linkedin. Con este código creamos el vector y el objeto `last`.
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1) # noten que el operador `tail` busca el último elemento del vector (por eso el 1 al final)
# Está el último valor menor que 5 o por encima de 10?
last < 5 | last > 10
# Es el último valor entre 15 (exclusive) y 20 (incluvise)
last >= 15 & last <= 20
2+2+2+3
Nico_calculation <- 199 + 1835
Nico_calculation
rm(Nico_calculation)
# Repasemos los vectores de Facebook y Linkedin, junto a la matriz visitas
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
visitas <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
View(visitas)
# Repasemos los vectores de Facebook y Linkedin, junto a la matriz visitas
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
visitas <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
# linkedin es mayor que 10 pero facebook menor que 10
linkedin > 10 & facebook < 10
# ¿Fueron alguno de los dos perfiles visitados por lo menos 12 veces?
linkedin >=12 | facebook >= 12
# ¿Cuándo las visitas estuvieron entre 11 (exclusivo) y 14 (inclusive)?
visitas > 11 & visitas <= 14
# Repasemos los vectores de Facebook y Linkedin, junto a la matriz visitas
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
visitas <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
# linkedin es mayor que 10 pero facebook menor que 10
linkedin > 10 & facebook < 10
# ¿Fueron alguno de los dos perfiles visitados por lo menos 12 veces?
linkedin >=12 | facebook >= 12
# ¿Cuándo las visitas estuvieron entre 11 (exclusivo) y 14 (inclusive)?
visitas
visitas > 11 & visitas <= 14
x !>7
x<-5
x
x !>7
x<-5
x
!(x >7)
x<-5
x
!!(x >7)
knitr::opts_chunk$set(echo = TRUE)
temperatura <- 30
if(temperatura > 30) {
print ("hace mucho calor")
}
temperatura <- 30
if(temperatura > 30) {
print ("hace mucho calor")
}
temperatura <- 30
if(temperatura > 25) {
print ("hace mucho calor")
}
x <- -5
if(X < 0) {
print ("x es un número negativo")
}
x <- -5
if(X < 0) {
print ("x es un número negativo")
}
x <- -5
if(x < 0) {
print ("x es un número negativo")
}
x <- 5
if(x < 0) {
print ("x es un número negativo")
} else {
print("x es un número positivo")
}
x <- 5
if(x < 0) {
print ("x es un número negativo")
} else {
print("x es un número positivo o es cero")
}
x <- -3
if(x < 0) {
print ("x es un número negativo")
} else if (x==0 {
x <- -3
if(x < 0) {
print ("x es un número negativo")
} else if (x==0) {
print(¨x es igual a cero")
x <- -3
if (x<0) {
print("x es negativo")
} else if(x == 0) {
print("x es igual a cero")
} else {
print("x es positivo")
}
